name: Build, Package, and Release

on:
  push:
    tags:
      - 'v*'  # Trigger workflow on version tags (e.g., v1.0.0)

jobs:
  build:
    runs-on: windows-latest

    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Setup .NET
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 8.0  # Ensure .NET 8 is used

      # Step 3: Restore dependencies
      - name: Restore dependencies
        run: dotnet restore

      # Step 4: Build the application
      - name: Build the application
        run: dotnet publish -c Release -o output

      # Step 5: Create a basic installer using Inno Setup
      - name: Install Inno Setup
        run: |
          echo "Installing Inno Setup..."
          choco install innosetup --yes

      - name: Verify or Create Installer Directory
        run: |
          echo "Ensuring installer directory exists..."
          if (!(Test-Path -Path "$env:GITHUB_WORKSPACE\installer")) {
            echo "Installer directory not found. Creating it..."
            New-Item -ItemType Directory -Path "$env:GITHUB_WORKSPACE\installer"
          }
        shell: pwsh

      - name: Create Installer
        run: |
          echo "Running Inno Setup to create installer..."
          "C:\Program Files (x86)\Inno Setup 6\ISCC.exe" "$env:GITHUB_WORKSPACE\installer\setup.iss"
        shell: cmd

      # Step 6: Generate release notes with pull request summaries
      - name: Generate Release Notes
        id: generate_release_notes
        uses: actions/github-script@v6
        with:
          script: |
            const { data: pullRequests } = await github.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'closed',
              per_page: 10
            });

            const prSummaries = pullRequests.map(pr => `- ${pr.title} (#${pr.number}) by ${pr.user.login}`).join('\n');

            const releaseNotes = `### Pull Requests:\n\n${prSummaries}`;

            console.log(`Generated release notes: \n${releaseNotes}`);
            core.setOutput('notes', releaseNotes);

      # Step 7: Create GitHub Release
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          body: ${{ steps.generate_release_notes.outputs.notes }}
          draft: false
          prerelease: false
          token: ${{ secrets.GITHUB_TOKEN }}

      # Step 8: Upload release assets
      - name: Upload Release Assets
        run: echo "Uploading release assets..."
        uses: actions/upload-release-asset@v1
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          release_id: ${{ steps.create_release.outputs.id }}
          asset_path: ./output/*.exe  # Path to the installer executable
          asset_name: ${{ github.ref_name }}_Installer.exe
          content_type: application/vnd.microsoft.portable-executable
